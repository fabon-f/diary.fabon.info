---
import { getSlugFromPath, getTitleFromSlug, getPrevAndNextArticle } from '../lib/utils'
import Layout from '../layouts/Layout.astro'
import Anchor from '../components/Anchor.astro'
import Image from '../components/Image.astro'

export async function getStaticPaths() {
    const posts = await Astro.glob('../content/diary/*.mdx')

    return posts.map(post => {
        const slug = getSlugFromPath(post.file)
        return ({
            params: {
                slug
            },
            props: {
                post,
                title: post.frontmatter['title'] ?? getTitleFromSlug(slug),
                path: `/${slug}/`
            }
        })
    })
}

const { Content } = Astro.props.post
const { title, path } = Astro.props

const components = {
    a: Anchor,
    img: Image
}

const { prev, next } = getPrevAndNextArticle(new Date(path.split('/')[1]))
---
<Layout title={title} path={path}>
    <main>
        <article class="prose">
            <Content components={components} title={title} />
        </article>
        <div class="prev-next">
            <div>
                <!-- https://iconmonstr.com/angel-left-thin-svg/ -->
                { next && <svg class="icon" width="24" height="24" viewBox="0 0 24 24" fill-rule="evenodd" clip-rule="evenodd"><path d="M20 .755l-14.374 11.245 14.374 11.219-.619.781-15.381-12 15.391-12 .609.755z"/></svg> }
                { next && <a href={next.url}>{ next.title }</a> }
            </div>
            <div>
                { prev && <a href={prev.url}>{ prev.title }</a> }
                <!-- https://iconmonstr.com/angel-right-thin-svg/ -->
                { prev && <svg class="icon" width="24" height="24" viewBox="0 0 24 24" fill-rule="evenodd" clip-rule="evenodd"><path d="M4 .755l14.374 11.245-14.374 11.219.619.781 15.381-12-15.391-12-.609.755z"/></svg> }
            </div>
        </div>
    </main>
</Layout>

<style>
    article :global(h1) {
        text-align: center;
    }
    article > :global(.footnotes) {
        margin-block-start: 3.5em;
        font-size: 0.9em;
        border-block-start: 1px solid var(--border-color);
    }
    article :global(h2), article :global(h3) {
        border-block-end: 1px solid var(--border-color);
    }
    article :global([data-rehype-pretty-code-title]) {
        font-family: ui-monospace, monospace;
        /* https://www.nordtheme.com/docs/colors-and-palettes */
        background-color: #4c566a;
        color: #eceff4;
        padding: 0.3rem 1rem;
        font-size: 0.9em;
    }
    article :global([data-rehype-pretty-code-fragment]) {
        border-radius: 0.3rem;
        overflow: hidden;
    }
    article :global([data-rehype-pretty-code-fragment] pre) {
        margin: 0;
    }
    article :global(pre > code) {
        display: grid;
        padding: 1rem;
        overflow-x: scroll;
    }
    article :global([data-rehype-pretty-code-fragment] code[data-line-numbers]) {
        padding-inline-start: 10px;
        counter-reset: line;
    }
    article :global([data-rehype-pretty-code-fragment] code[data-line-numbers] > .line::before) {
        counter-increment: line;
        content: counter(line);

        font-family: ui-monospace, monospace;
        display: inline-block;
        width: 1rem;
        margin-right: 1rem;
        text-align: right;
        color: darkgray;
    }
    article :global([data-rehype-pretty-code-fragment] code[data-line-numbers-max-digits="2"] > .line::before) {
        width: 1.5rem;
    }
    article :global([data-rehype-pretty-code-fragment] code[data-line-numbers-max-digits="3"] > .line::before) {
        width: 2rem;
    }

    .prev-next {
        display: flex;
        margin-block-start: 2.5rem;
    }
    .prev-next > * {
        width: 50%;
        text-align: center;
    }
    .icon {
        stroke: currentColor;
        fill: currentColor;
        height: 0.8em;
        width: auto;
    }
</style>
